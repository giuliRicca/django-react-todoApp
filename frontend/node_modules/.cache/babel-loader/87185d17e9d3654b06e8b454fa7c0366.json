{"ast":null,"code":"var _jsxFileName = \"/Users/giulianoricca/Documents/Programming/React/django-react-todo/frontend/src/Components/Modal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Modal as BsModal, Button, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Modal(_ref) {\n  _s();\n\n  let {\n    show,\n    toggle,\n    item,\n    onSubmit\n  } = _ref;\n  const [current, setCurrent] = useState(item);\n\n  const handleChange = e => {\n    let name = e.target.name;\n    let value = e.target.value;\n\n    if (e.target.type === 'checkbox') {\n      value = e.target.checked;\n    }\n\n    ;\n    const newItem = { ...current,\n      [name]: value\n    };\n    console.log(newItem);\n    setCurrent(newItem);\n  };\n\n  return /*#__PURE__*/_jsxDEV(BsModal, {\n    show: show,\n    children: [/*#__PURE__*/_jsxDEV(BsModal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(BsModal.Title, {\n        children: \"New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(BsModal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            value: item.title,\n            type: \"text\",\n            placeholder: \"Title\",\n            name: \"title\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"Completed\",\n            name: \"completed\",\n            value: item.completed,\n            checked: item.completed,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(BsModal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: toggle,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: () => onSubmit(current),\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Modal, \"KZCAiwqAOMCghqbBHz1hWQbZhEA=\");\n\n_c = Modal;\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/Users/giulianoricca/Documents/Programming/React/django-react-todo/frontend/src/Components/Modal.js"],"names":["React","useState","Modal","BsModal","Button","Form","show","toggle","item","onSubmit","current","setCurrent","handleChange","e","name","target","value","type","checked","newItem","console","log","title","completed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,KAAK,IAAIC,OAAjB,EAA0BC,MAA1B,EAAkCC,IAAlC,QAA6C,iBAA7C;;;AAEA,SAASH,KAAT,OAAiD;AAAA;;AAAA,MAAlC;AAACI,IAAAA,IAAD;AAAOC,IAAAA,MAAP;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA;AAArB,GAAkC;AAC7C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAACO,IAAD,CAAtC;;AAEA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AAC1B,QAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAApB;AACA,QAAIE,KAAK,GAAGH,CAAC,CAACE,MAAF,CAASC,KAArB;;AACA,QAAIH,CAAC,CAACE,MAAF,CAASE,IAAT,KAAiB,UAArB,EAAiC;AAC/BD,MAAAA,KAAK,GAAGH,CAAC,CAACE,MAAF,CAASG,OAAjB;AACD;;AAAA;AAED,UAAMC,OAAO,GAAG,EAAC,GAAGT,OAAJ;AAAa,OAACI,IAAD,GAAQE;AAArB,KAAhB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAR,IAAAA,UAAU,CAACQ,OAAD,CAAV;AACD,GAVD;;AAYA,sBACI,QAAC,OAAD;AAAS,IAAA,IAAI,EAAEb,IAAf;AAAA,4BACA,QAAC,OAAD,CAAS,MAAT;AAAgB,MAAA,WAAW,MAA3B;AAAA,6BACE,QAAC,OAAD,CAAS,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADA,eAIA,QAAC,OAAD,CAAS,IAAT;AAAA,6BAEI,QAAC,IAAD;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA,iCACI,QAAC,IAAD,CAAM,OAAN;AACA,YAAA,KAAK,EAAEE,IAAI,CAACc,KADZ;AAEA,YAAA,IAAI,EAAC,MAFL;AAEY,YAAA,WAAW,EAAC,OAFxB;AAGA,YAAA,IAAI,EAAC,OAHL;AAIA,YAAA,QAAQ,EAAEV;AAJV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAAA,iCACI,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,IAAI,EAAC,UAAjB;AAA4B,YAAA,KAAK,EAAC,WAAlC;AACE,YAAA,IAAI,EAAC,WADP;AAEE,YAAA,KAAK,EAAEJ,IAAI,CAACe,SAFd;AAGE,YAAA,OAAO,EAAEf,IAAI,CAACe,SAHhB;AAIE,YAAA,QAAQ,EAAEX;AAJZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAJA,eAyBA,QAAC,OAAD,CAAS,MAAT;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,OAAO,EAAEL,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,MAAD;AACA,QAAA,OAAO,EAAC,SADR;AAEA,QAAA,OAAO,EAAE,MAAME,QAAQ,CAACC,OAAD,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH;;GArDQR,K;;KAAAA,K;AAuDT,eAAeA,KAAf","sourcesContent":["import React, {useState} from 'react'\nimport {Modal as BsModal, Button, Form} from 'react-bootstrap'\n\nfunction Modal({show, toggle, item, onSubmit, }) {\n    const [current, setCurrent] = useState(item)\n\n    const handleChange = (e) => {\n      let name = e.target.name;\n      let value = e.target.value;\n      if (e.target.type ==='checkbox') {\n        value = e.target.checked\n      };\n\n      const newItem = {...current, [name]: value}\n      console.log(newItem)\n      setCurrent(newItem)\n    } \n\n    return (\n        <BsModal show={show}>\n        <BsModal.Header closeButton>\n          <BsModal.Title>New Task</BsModal.Title>\n        </BsModal.Header>\n        <BsModal.Body>\n            {/* New Task Form */}\n            <Form >\n              <Form.Group>\n                  <Form.Control \n                  value={item.title} \n                  type=\"text\" placeholder=\"Title\" \n                  name='title'\n                  onChange={handleChange}\n                  />\n              </Form.Group>\n              <Form.Group className=\"mb-3\">\n                  <Form.Check type=\"checkbox\" label=\"Completed\"\n                    name='completed'\n                    value={item.completed}\n                    checked={item.completed}\n                    onChange={handleChange}\n                  />\n              </Form.Group>\n            </Form>\n        </BsModal.Body>\n        <BsModal.Footer>\n          <Button variant=\"secondary\" onClick={toggle}>\n            Close\n          </Button>\n          <Button \n          variant=\"primary\"\n          onClick={() => onSubmit(current)}>\n            Save\n          </Button>\n        </BsModal.Footer>\n      </BsModal>\n    )\n}\n\nexport default Modal\n"]},"metadata":{},"sourceType":"module"}